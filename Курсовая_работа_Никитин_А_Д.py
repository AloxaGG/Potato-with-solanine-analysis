# -*- coding: utf-8 -*-
"""Курсовая_Работа_Никитин_А.Д..ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xF0YfF8HkeqP9-5Ma3vhAFsMmuGHHc0p
"""

# Commented out IPython magic to ensure Python compatibility.
import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout
from tensorflow.keras import utils
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing import image_dataset_from_directory
import matplotlib.pyplot as plt
from google.colab import files
# %matplotlib inline

"""## Создаем Tensorflow Dataset'ы """

batch_size=16
image_size=(100, 100)

"""Подготовка изображений"""

import shutil
import os

# Каталог с набором данных
data_dir = 'data'
# Каталог с данными для обучения
train_dir = 'train'
# Каталог с данными для тестирования
test_dir = 'test'
# Часть набора данных для тестирования
test_data_portion = 0.15
# Часть набора данных для проверки
val_data_portion = 0.15
# Количество элементов данных в одном классе
nb_images = 108

def create_directory(dir_name):
    if os.path.exists(dir_name):
        shutil.rmtree(dir_name)
    os.makedirs(dir_name)
    os.makedirs(os.path.join(dir_name, "Potato_with_solanine"))
    os.makedirs(os.path.join(dir_name, "Healthy_potato"))

create_directory(train_dir)
create_directory(test_dir)

def copy_images(start_index, end_index, source_dir, dest_dir):
    for i in range(start_index, end_index):
        shutil.copy2(os.path.join(source_dir, "solanine (" + str(i) + ").png"), 
                    os.path.join(dest_dir, "Potato_with_solanine"))
        shutil.copy2(os.path.join(source_dir, "healthy (" + str(i) + ").png"), 
                   os.path.join(dest_dir, "Healthy_potato"))

start_test_data_idx = int(nb_images * (1 - test_data_portion))
print(start_test_data_idx)

copy_images(1, start_test_data_idx, data_dir, train_dir)
copy_images(start_test_data_idx, nb_images, data_dir, test_dir)

"""**Набор данных для обучения**"""

train_dataset = image_dataset_from_directory('train',
                                             subset='training',
                                             seed=42,
                                             validation_split=0.1,
                                             batch_size=batch_size,
                                             image_size=image_size)

"""**Проверочный набор данных**"""

validation_dataset = image_dataset_from_directory('train',
                                             subset='validation',
                                             seed=42,
                                             validation_split=0.1,
                                             batch_size=batch_size,
                                             image_size=image_size)

"""Названия классов в наборах данных."""

class_names = train_dataset.class_names
class_names

"""**Примеры изображений**"""

plt.figure(figsize=(8, 8))
for images, labels in train_dataset.take(1):
  for i in range(9):
    ax = plt.subplot(3, 3, i + 1)
    plt.imshow(images[i].numpy().astype("uint8"))
    plt.title(class_names[labels[i]])
    plt.axis("off")

"""**Набор данных для тестирования**"""

test_dataset = image_dataset_from_directory('test',
                                             batch_size=batch_size,
                                             image_size=image_size)

classes = test_dataset.class_names; classes

"""## Настраиваем производительность TensorFlow DataSet'ов"""

AUTOTUNE = tf.data.experimental.AUTOTUNE

train_dataset = train_dataset.prefetch(buffer_size=AUTOTUNE)
validation_dataset = validation_dataset.prefetch(buffer_size=AUTOTUNE)
test_dataset = test_dataset.prefetch(buffer_size=AUTOTUNE)

"""## Создаем нейронную сеть"""

# Создаем последовательную модель
model = Sequential()
# Сверточный слой
model.add(Conv2D(16, (5, 5), padding='same', 
                 input_shape=(100, 100, 3), activation='relu'))
# Слой подвыборки
model.add(MaxPooling2D(pool_size=(2, 2)))
# Сверточный слой
model.add(Conv2D(32, (5, 5), activation='relu', padding='same'))
# Слой подвыборки
model.add(MaxPooling2D(pool_size=(2, 2)))
# Сверточный слой
model.add(Conv2D(64, (5, 5), activation='relu', padding='same'))
# Слой подвыборки
model.add(MaxPooling2D(pool_size=(2, 2)))
# Сверточный слой
model.add(Conv2D(128, (5, 5), activation='relu', padding='same'))
# Слой подвыборки
model.add(MaxPooling2D(pool_size=(2, 2)))
# Полносвязная часть нейронной сети для классификации
model.add(Flatten())
model.add(Dense(1024, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(256, activation='relu'))
model.add(Dropout(0.2))
# Выходной слой, 2 нейрона по количеству классов
model.add(Dense(2, activation='softmax'))

"""**Компилируем модель**"""

model.compile(loss='sparse_categorical_crossentropy',
              optimizer="adam",
              metrics=['accuracy'],
              run_eagerly=True)

"""## Обучаем нейронную сеть"""

history = model.fit(train_dataset, 
                    validation_data=validation_dataset,
                    epochs=15,
                    verbose=2)

"""## Оцениваем качетсво обучения сети"""

# Оцениваем качество обучения модели на тестовых данных
scores = model.evaluate(test_dataset, verbose=1)

print("Доля верных ответов на тестовых данных, в процентах:", round(scores[1] * 100, 4))

plt.plot(history.history['accuracy'], 
         label='Доля верных ответов на обучающем наборе')
plt.plot(history.history['val_accuracy'], 
         label='Доля верных ответов на проверочном наборе')
plt.xlabel('Эпоха обучения')
plt.ylabel('Доля верных ответов')
plt.legend()
plt.show()

plt.plot(history.history['loss'], 
         label='Ошибка на обучающем наборе')
plt.plot(history.history['val_loss'], 
         label='Ошибка на проверочном наборе')
plt.xlabel('Эпоха обучения')
plt.ylabel('Ошибка')
plt.legend()
plt.show()

"""## Сохраняем обученную нейронную сеть"""

model.save("Potato_quality.h5")

files.download("Potato_quality.h5")

"""## Используем сеть для распознавания наличия соланина в клубне картофеля"""

prediction = model.predict(test_dataset)

prediction

for elem in prediction:
  predictionz = np.argmax(elem)
  print("Номер класса:", predictionz)
  print("Название класса:", classes[predictionz])

"""Выберем случайное изображение и проверим"""

data_sample = next(iter(test_dataset))
sample_image = data_sample[0].numpy()[0]
sample_label = classes[data_sample[1].numpy()[0]]
prediction = np.argmax(model.predict(sample_image.reshape(-1, *sample_image.shape))[0])
print("Номер класса:", prediction)
print("Название класса:", classes[prediction])

plt.figure(figsize=(4, 4))
plt.imshow(data_sample[0].numpy()[0].astype("uint8"))
plt.title(classes[prediction])
plt.axis("off")

"""#Оценка качества работы нейронной сети на разных условиях

Частичное перекрытие здорового растения листьями
"""

create_directory('dirt_test')

dirt_dataset = image_dataset_from_directory('dirt_test',
                                             batch_size=2,
                                             image_size=image_size)

# Оцениваем качество обучения модели на тестовых данных
scores = model.evaluate(dirt_dataset, verbose=1)

print("Доля верных ответов на тестовых данных, в процентах:", round(scores[1] * 100, 4))

plt.figure(figsize=(8, 8))
for i in range(9):
  data_sample = next(iter(dirt_dataset))
  sample_image = data_sample[0].numpy()[0]
  sample_label = classes[data_sample[1].numpy()[0]]
  prediction = np.argmax(model.predict(sample_image.reshape(-1, *sample_image.shape))[0])
  ax = plt.subplot(3, 3, i + 1)
  plt.imshow(data_sample[0].numpy()[0].astype("uint8"))
  plt.title(classes[prediction])
  plt.axis("off")